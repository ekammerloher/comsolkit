classdef LayeredModel < comsolkit.ComsolModel
    % LayeredModel Inherits from ComsolModel and adds layer functionality.
    
    properties
        layerArray % Contains Layer object handles.
    end
    properties(Constant)
        DEFAULT_LAYER_CLASS = @comsolkit.Layer; % Used for add functions.
    end
    
    methods
        function obj = LayeredModel(varargin)
            % LayeredModel Creates a comsol model object supporting layers.
            %
            %  LayeredModel(varargin)
            %
            %  Parameters:
            %  FromFile: Load from a mph-file on the file system
            %  FromTag: Load from an existing model on the server by tag
            %  %%% parameters below only for new models %%%
            %  LengthUnit: Length of a unit in meters (default: 1e-9)
            
            % Call super constructor with explicit 3d geometry.
            obj = obj@comsolkit.ComsolModel(varargin{:}, ...
                                            'GeomDimension', 3);
            
            % Prepare array for Layer objects.
            obj.layerArray = comsolkit.Layer.empty();
        end
        
        
        function [startIndex, stopIndex] = batch_add_layer(obj, ...
                                       coordinateCell, varargin)
            % batch_add_layer Creates layers with polygons per layer.
            %
            %  [startIndex, stopIndex] = batch_add_layer(obj, ...
            %                                            coordinateCell)
            %  [startIndex, stopIndex] = batch_add_layer(obj, ...
            %                                          coordinateCell, ...
            %                                          nameCell)
            %  [startIndex, stopIndex] = batch_add_layer(obj, ...
            %                                          coordinateCell, ...
            %                                          nameCell, ...          
            %                                          layerClass)            
            %  [startIndex, stopIndex] = batch_add_layer(obj, ...
            %                                          coordinateCell, ...
            %                                          nameCell, ...          
            %                                          layerClass, ...
            %                                          varargin)
            %
            %  Parameter:
            %  coordinateCell: Cell array of cell arrays with n x 2 
            %                  coorinate arrays: {{[...], ...}, {...}, ...}
            %  nameCell: Cell array of names per layer element (optional).
            %            If not provided, names are generated by comsol
            %  layerClass: handle to constructor from which an object is
            %              generated. (Default: '@comsolkit.Layer')
            %  varargin: Passed on to Layer object constructor. See help of
            %            comsolkit.Layer.Layer
            %
            %  Return Parameters:
            %  startIndex, stopIndex: Start/stop index of added layers to
            %                         layerArray
            
            if nargin < 3
                nameCell = {};
                layerClass = obj.DEFAULT_LAYER_CLASS;
            elseif nargin < 4
                nameCell = varargin{1};
                layerClass = obj.DEFAULT_LAYER_CLASS;
            else
                nameCell = varargin{1};
                layerClass = varargin{2};
            end
            
            assert(isa(layerClass, 'function_handle'), ...
                   'layerClass must be a function handle.');
            assert(iscell(coordinateCell) && iscell(nameCell), ...
                   'Input parameters not valid.');
            
            % If nameCell does not match coordinateCell or no names
            % provided generate empty nameCell matching coordinateCell.
            if length(nameCell) ~= length(coordinateCell) || ...
               isempty(nameCell)
           
               nameCell = cell(size(coordinateCell));
            end
            
            startIndex = length(obj.layerArray) + 1;
            % Loop over input cell of coordinate arrays.
            for i = 1:length(coordinateCell)
                coordinateArrayCell = coordinateCell{i};
                assert(iscell(coordinateArrayCell), ...
                       'Wrong format of input coordinates.');
                name = nameCell{i};

                if isempty(name)
                    obj.layerArray(end+1) = layerClass(obj, ...
                                                       varargin{3:end});
                else
                    obj.layerArray(end+1) = layerClass(obj, ...
                                                       varargin{3:end}, ... 
                                                       'Name', name);
                end
                
                for coordinateArray = coordinateArrayCell
                    % For elem = cell pattern: elem 1x1 cell, use elem{1}.
                    obj.layerArray(end).add_poly(coordinateArray{1});
                end
            end
            stopIndex = length(obj.layerArray);
        end
        
        
        function index = add_layer(obj, coordinateArrayCell, varargin)
            % add_layer Creates one layer with polygons.
            %
            %  index = add_layer(obj, coordinateArrayCell)
            %  index = add_layer(obj, coordinateArrayCell, name)
            %  index = add_layer(obj, coordinateArrayCell, name, ...
            %                    layerClass)
            %  index = add_layer(obj, coordinateArrayCell, name, ...
            %                    layerClass, varargin)
            %
            %  Parameter:
            %  coordinateArrayCell: Cell array with n x 2 
            %                       coorinate arrays: {[...], ...}
            %  name: Name of layer element (optional). If not provided,
            %        a name is generated from LAYER_NAME_BASE
            %  layerClass: handle to constructor from which an object is
            %              generated. (Default: '@comsolkit.Layer')
            %  varargin: Passed on to Layer object constructor. See help of
            %            comsolkit.Layer.Layer
            %
            %  Return Parameters:
            %  index: Index of added layer to layerArray
            
            if nargin < 3
                index = obj.batch_add_layer({coordinateArrayCell});
            else
                name = varargin{1};
                if isempty(name)
                    index = obj.batch_add_layer({coordinateArrayCell}, ...
                                                {}, ...
                                                varargin{2:end});
                else
                    index = obj.batch_add_layer({coordinateArrayCell}, ...
                                                {name}, ...
                                                varargin{2:end});
                end
            end
        end
        
        
        function restore(obj)
            extrudeTagCell = arrayfun(@(f)char(f.tag), ...
                                      [obj.layerArray.extrude], ...
                                      'UniformOutput', false);
            itr = obj.geom.feature.iterator;
            while itr.hasNext()
                feature = itr.next();
                tagPattern = [comsolkit.Layer.BASE_TAG_EXTRUDE '\d+'];
                featureTag = char(feature.tag);
                
                if ~isempty(regexp(featureTag, tagPattern, 'once'))
                    if ~any(strcmp(featureTag, extrudeTagCell))
                        l = comsolkit.Layer(obj, 'FromExtrudeTag', ...
                                            featureTag);
                        obj.layerArray(end+1) = l;
                    end
                end
            end
        end
        
        
        function batch_remove_layer(obj, startIndex, stopIndex)
            % batch_remove_layer Remove layers from server and layerArray.
            %
            %  batch_remove_layer(obj, startIndex, stopIndex)
            
            assert(isscalar(startIndex) && ...
                   isscalar(stopIndex) && ...
                   startIndex >= 1 && ...
                   startIndex <= stopIndex && ...
                   stopIndex <= length(obj.layerArray), ...
                   'Start/stop index is not valid.');
               
            for i = startIndex:stopIndex
                obj.layerArray(i).delete();
            end
            % Mask the deleted Layer objects.
            obj.layerArray = obj.layerArray( ...
                             [1:startIndex-1 stopIndex+1:end]);
        end
        

        function remove_layer(obj, index)
            % remove_layer Remove a layer index from layerArray.
            %
            %  remove_layer(obj, index)
            
            obj.batch_remove_layer(index, index);
        end

        
        function remove_all_layers(obj)
            % remove_all_layers Remove all layers from layerArray.
            %
            %  remove_all_layers(obj)
            
            endIndex = length(obj.layerArray);
            
            obj.batch_remove_layer(1, endIndex);
        end
        
        
        function savedObj = saveobj(obj)
            % saveobj Saves the object including the comsol model.
            %
            %  savedObj = saveobj(obj)
            
            savedObj = saveobj@comsolkit.ComsolModel(obj);
        end
        
        
        function pprint_layer_info(obj)
            % pprint_layer_info Pretty print layer information.
            %
            %  pprint_layer_info(obj)
            
            for index = 1:length(obj.layerArray)
                layer = obj.layerArray(index);
                stCell{index} = layer.info_struct();
                stCell{index}.idx = index;
            end

            uniqueFields = unique(char(cellfun(@(x)char(fieldnames(x)), ...
                                  stCell, 'UniformOutput',false)),'rows');

            % Fill in missing elements, if any.
            for k=1:length(stCell)
                for u=1:size(uniqueFields,1)
                    fieldName = strtrim(uniqueFields(u,:));
                    if ~isfield(stCell{k}, fieldName)
                        stCell{k}.(fieldName) = [];
                    end
                end
            end 
            disp(struct2table([stCell{:}]));
        end


        function print_layer_info(obj)
            % print_layer_info Prints layer information in a table.
            %
            %  print_layer_info(obj)
            
            fprintf('    %-30s %-30s %-15s %-15s\n','Class', 'Name', ...
                    'zPosition', 'totDistance');
            fprintf([repmat('-', 1, 93), '\n']);
            
            for index = 1:length(obj.layerArray)
                layer = obj.layerArray(index);
                
                fprintf('%-3d %s\n', index, layer.info_string());
            end
        end
    end
    methods(Static)
        function loadedObj = loadobj(obj)
            % loadobj Loads the object including the comsol model.
            %
            % loadedObj = loadobj(obj)
            
            loadedObj = loadobj@comsolkit.ComsolModel(obj);
        end
    end
end
